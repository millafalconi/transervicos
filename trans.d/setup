#!/usr/bin/env bash
# vim: ft=sh

SUBCOMMAND_DESC="Verifique o setup do projeto"
SUBCOMMAND_HELP=$(cat <<EOH
Usage ${MAIN_COMMAND} ${SUBCOMMAND} [check] [install]

check Verifica quais dependências existem e versões mínimas.
install Instala dependências necessárias e não instaladas.

TODO: Add required plugin vagrant-vbguest

EOH
)

function msg_installed() {
  in_green "OK: "${1}" instalado"
}

function msg_not_installed() {
  in_red "NOK: "${1}" necessário. "${1}" não instalado"
}

function is_installed() {
  case ${1} in
    vagrant-cachier | vagrant-vbguest)
      is_installed "vagrant" && [[ $(vagrant plugin list | grep "${1}") = *${1}* ]]
      ;;
    *)
      [ -x "$(command -v ${1})" ]
      ;;
  esac

}

function has_min_version() {
  local dependency=${1}
  local min_required=${2}

  current=$(${dependency} --version | head -n 1 | awk '{print $NF}' | cut -c 1-3)
  if [ 1 != `echo "${current} < ${min}" | bc` ]; then
    return 0
  fi
  return 1
}

function check_version() {
  min=1.9

  if ! is_installed ${1}; then
    in_red "NOK: não foi possivel verificar versão do ${1}. ${1} não instalado"
    return
  fi

  if ! has_min_version ${1} ${min}; then
    in_red "NOK: versão de ${1} é menor que ${min}. atualize ${1}"
    return
  fi

  in_green "OK: versão de ${1} é maior ou igual a ${min}"
}

function check() {
  if is_installed ${1}; then
    msg_installed ${1}
  else
    msg_not_installed ${1}
  fi
}

function install() {
  local to_install=${1}
  case $to_install in
    ansible)
      in_yellow "OK: instalando $to_install via pip..."
      pip install $to_install
      ;;
    vagrant|virtualbox)
      in_yellow "OK: instalando $to_install via brew cask..."
      brew cask install $to_install
      ;;
    vagrant-cachier|vagrant-vbguest)
      in_yellow "OK: instalando vagrant plugin $to_install..."
      if ! is_installed "vagrant"; then
        msg_not_installed "vagrant"
        in_red "NOK: $to_install não pode ser instalado sem o vagrant"
        return
      fi
      vagrant plugin install $to_install
      ;;
    *)
      ;;
  esac
}

function parse_choice() {
  local choice=${1}
  case $choice in
    y|Y)
      in_yellow "OK: instalação confirmada."
      ;;
    n|N)
      in_yellow "NOK: instalação não confirmada."
      return -1
      ;;
    *)
      in_red "NOK: $choice não é uma opção válida."
      exit;;
  esac
}

function verify_upgrade() {
  local dependency=${1}
  local min=${2}
  if has_min_version $dependency $min; then
    in_green "OK: $dependency atualizado com sucesso!"
  else
    in_red "NOK: versão do $dependency menor que ${min}. atualize $dependency."
  fi
}

function verify_instalation() {
  local dependency=${1}
  if is_installed $dependency; then
    in_green "OK: $dependency instalado com sucesso!"
  else
    in_red "NOK: $dependency não instalado"
  fi
}

function confirm_installation() {
  read -p "Confirma instalação? (y/n) " choice
  parse_choice ${choice}
}

function msg_instalation_not_confirmed() {
  in_yellow "NOK: $to_be_installed necessário, mas não instalado"
  in_yellow "NOK: encerrando setup de: $to_be_installed"
}

function msg_upgrade_not_confirmed() {
  in_yellow "NOK: Versão mínima de $to_be_upgraded necessária, mas não instalada"
  in_yellow "Versão mínima: ${min}. Versão encontrada: ${current}"
  in_yellow "NOK: encerrando atualização de versão para: $to_be_upgraded"
}

function upgrade() {
  local to_be_upgraded=${1}
  in_yellow "OK: atualizando $to_be_upgraded via pip..."
  pip install $to_be_upgraded --upgrade
}

function upgrade_if_needed() {
  local to_be_upgraded=${1}
  local min=${2}

  current=$(${to_be_upgraded} --version | head -n 1 | awk '{print $NF}' | cut -c 1-3)

  if ! [ 1 -eq `echo "${current} < ${min}" | bc` ]; then
    return
  fi

  in_yellow "NOK: Versão mínima de $to_be_upgraded não encontrada"
  in_yellow "Versão mínima: ${min}. Versão encontrada: ${current}"
  in_yellow "$to_be_upgraded será atualizado..."

  confirm_upgrade

  if [[ $? != 0 ]]; then
    msg_upgrade_not_confirmed
    return
  fi

  upgrade $to_be_upgraded
  verify_upgrade $to_be_upgraded $min

}

function confirm_upgrade() {
  read -p "Confirma atualização para última versão? (y/n) " choice
  parse_choice ${choice}
}

function install_if_missing() {
  local to_be_installed=${1}

  if is_installed $to_be_installed; then
    msg_installed $to_be_installed
    return
  fi

  in_yellow "NOK: $to_be_installed é necessário e não encontrado"
  in_yellow "$to_be_installed será instalado..."

  confirm_installation

  if [[ $? != 0 ]]; then
    msg_instalation_not_confirmed
    return
  fi

  install $to_be_installed
  verify_instalation $to_be_installed
}

function check_setup() {
  check "virtualbox"
  check "vagrant"
  check "vagrant-cachier"
  check "vagrant-vbguest"
  check "ansible"
  check_version "ansible" 1.9
}

function install_all() {
  in_green "Instalando dependências necessárias para o projeto: transervicos"
  install_if_missing "virtualbox"
  install_if_missing "ansible"
  upgrade_if_needed "ansible" 1.9
  install_if_missing "vagrant"
  install_if_missing "vagrant-cachier"
  install_if_missing "vagrant-vbguest"
}

is_help_mode "${@}" && return

case ${1} in
  check)
    check_setup
    ;;
  install)
    install_all
  ;;
esac
